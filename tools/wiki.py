from __future__ import annotations

from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime


@dataclass
class Option:
    name: str
    description: str
    type: str
    default: str

    def py_type(self):
        if self.type == "int":
            return "KeywordInt"
        if self.type == "float":
            return "KeywordFloat"
        if self.type == "bool":
            return "KeywordBool"
        if self.type == "str":
            return "KeywordStr"
        if self.type == "gradient":
            return "KeywordGradient"
        if self.type == "vec2":
            return "KeywordVec2"
        if self.type == "color":
            return "KeywordColor"
        return "KeywordStr"

    def py_title(self):
        return self.name.replace("-", "_").replace(".", "_")


config: dict[str, dict[str, Option]] = defaultdict(dict)

section = None
subsections: dict[str, list[str]] = defaultdict(list)

for line in open("hyprland-wiki/pages/Configuring/Variables.md"):
    line = line[:-1].strip()
    if line.startswith("## "):
        section = line.removeprefix("##").strip().lower()
    elif line.lower().startswith("_subcategory "):
        if section:
            path = line.lower().removeprefix("_subcategory ").strip()[:-2].strip("`").strip(":")
            parent = path.split(":")[0]
            subsections[parent].append(section)
            section = path
    elif "name|description|type|default" in line.replace(" ", ""):
        continue
    elif section:
        if line.startswith("|"):
            row = [i for i in (i.strip() for i in line.split("|")) if i]
            if all(i == "-" for i in row[0]):
                continue
            config[section][row[0]] = Option(*row)


print("from __future__ import annotations")
print(f"# This file was auto-generated by `tools/wiki.py` on {datetime.now().isoformat()}")
print("from .keyword import KeywordBool, KeywordInt, KeywordFloat, KeywordVec2, KeywordColor, KeywordStr, KeywordGradient")
for section, options in reversed(config.items()):
    if "per-device" in section:
        continue
    section_name = section
    if len(section_nest := section.split(":")) > 1:
        section_name = section_nest[-1]
    print(f"class {section_name.title()}:")
    if subsections[section]:
        print(f"    # Subcategory")
        for subsection in subsections[section]:
            print(f"   {subsection.title()} = {subsection.title()}")
        print()
    for option in options.values():
        path = f"{section.lower()}:{option.name}"
        print(f"   {option.py_title()} = {option.py_type()}({path!r})")
        print(f"   {option.description!r}")
